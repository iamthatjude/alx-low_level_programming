Terminal: man gcc
Google: gcc manpage
=====================

0. Preprocessor

- Run a C file through the Preprocessor stage alone and save it's result into another file:
;; Option 1: -E
;;; Usage: Stops after the preprocessing stage. Does not compile.
;; Option 2: -o
;;; Usage: Places the output in a file named right after the option/flag

gcc -E file.c -o newfile


----
1. Compiler

- Compile a C file but do not link it and have an extension of ".o"
-: Doing this will generate the object file ".o" by itself
;; Option: -c
;; Usage: compile or assemble the source file, but do not link. The output is in a form of an object file ".o"

gcc -c file.c


----
2. Assembler

- Generate the assembly code of a C code and save it in an output file with extension ".s"
;; Option: -S
;; Usage: Stops after the compilation but does not assemble. The output file generated is in a form of an assembly code ".s"

gcc -S file.c


----
3. Name

- Compile a C file and create an executable
;; Option: -o
;; Usage: Places the output in a file named right after the option/flag

gcc file.c -o newfile


---
4. Hello, puts

- A C program that prints a given string using the function "puts()"
;; Function: puts()
;; Usage: it only takes one argument which should be a character (char) and should also be allocated a memory space since char is usually 1.

Example:
char s;
s = 'H';

..but

char ss[];
ss = "Many strings";

puts(ss);


----
5. Hello, printf

- A C program that prints a given string using the function "printf()"
;; Function: printf()
;; Usage: it can takes one argument which will be formatted and an arbitary number of arguments.

Example:
printf("Hello!\n");

Or

char name[4];
printf("Hello %c\n", name);


----
6. Size is not grandeur, and territory does not make a nation

- A C program that prints the size of various types based on the machine compiled and run on.
;; Function: sizeof()
;; Usage: displays the size of a given type.

Example:
printf("Size of a char: %d\n", sizeof(char));


----
7. Intel

- Generate the assembly code (Intel syntax) of a C code and save in an output file
;; Option 1: -S
;;; Usage: Stops after the compilation but does not assemble. The output file generated is in a form of an assembly code ".s"
;; Option 2: -masm=dialect
;;; Usage: Microsoft Macro Assembler (MASM) | generates in a given syntaxt (dialect)

gcc -S -masm=Intel file.c
